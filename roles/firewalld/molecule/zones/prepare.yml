---

# We must store the containers dynamically assigned IP addresses to allow
# us to use it in our firewall tests scenario

- name: Prepare
  hosts: zones
  gather_facts: false
  tasks:

    # This will fail if you add a network to the container.
    # Here is the output of podman inspect for a container
    # without a network specified at creation:
    #   "NetworkSettings": {
    #       "IPAddress": "10.88.0.110",
    #       "MacAddress": "ae:f1:6d:f0:79:95",
    #       [...]
    #
    # Here is the output of podman inspect for a container
    # with a network attached (podman run --network xxx):
    #   "NetworkSettings": {
    #       "IPAddress": "",
    #       "MacAddress": "",
    #       [...]
    #       "Networks": {
    #           "cni-podman2": {
    #               "IPAddress": "10.89.1.3",
    #               "MacAddress": "66:63:7c:74:1f:d7",
    #               "NetworkID": "cni-podman2",
    #               [...]
    #           }
    #       }
    #
    # But, because we can't attach more than one network to a podman
    # container, we won't use Molecule to test firewalld's interface zones
    - name: Get IP
      connection: local
      delegate_to: localhost
      shell:
        cmd: >
          podman inspect
          -f "{{ '{{' }} .NetworkSettings.IPAddress {{ '}}' }}"
          {{ inventory_hostname }}
      register: container_ip
      changed_when: false

    # iproute provides commands: ip, route, ss, ...
    # iputils provides commands: ping, arping, tracepath, ...
    - name: Install ip packages for debugging
      yum:
        name:
          - iproute
          - iputils
        state: present

    - name: Get default interface name
      shell:
        cmd: ip -0 -4 route show default | awk '{ print $5 }'
      register: container_interface

    - name: Create custom fact folder
      file:
        path: /etc/ansible/facts.d
        state: directory
        recurse: true

    - name: Create custom fact to store IP address
      template:
        src: ./custom_facts.j2
        dest: /etc/ansible/facts.d/molecule.fact

    - name: Ensure .ssh folder exists on zone2
      file:
        path: /root/.ssh
        state: directory
        owner: root
        group: root
        mode: '0700'
      when: inventory_hostname == "zone2"

    - name: Install Openssh to provide ssh-keygen command
      yum:
        name: openssh
        state: present
      when: inventory_hostname == "zone2"

    - name: Create ssh keys pair on "zone2"
      openssh_keypair:
        type: ed25519
        path: /root/.ssh/id_ed25519
        owner: root
        comment: root@zone2
      when: inventory_hostname == "zone2"

    - name: Get root@zone2 public key
      slurp:
        src: /root/.ssh/id_ed25519.pub
      register: zone2_pub_key
      when: inventory_hostname == "zone2"

    - name: Paste zone2's public key in authorized_key file of zone1
      authorized_key:
        user: root
        state: present
        manage_dir: true
        key: "{{ hostvars['zone2'].zone2_pub_key['content'] | b64decode }}"
      when: inventory_hostname == "zone1"

    - name: Ensure SSHD server is installed on zone1
      yum:
        name: openssh-server
        state: present
      when: inventory_hostname == "zone1"

    - name: Ensure SSHD server service is running on zone1
      service:
        daemon_reload: true
        enabled: true
        name: sshd.service
        state: started
      when: inventory_hostname == "zone1"

    - name: Install xinetd to simulate mysqld on port 3306
      yum:
        name: xinetd
        state: present
      when: inventory_hostname == "zone1"

    - name: Create xinetd configuration file
      copy:
        content: |
          service mysqld
          {
            id          = fake-mysqld
            type        = UNLISTED
            wait        = no
            socket_type = stream
            protocol    = tcp
            port        = 3306
            user        = root
            server      = /usr/sbin/sshd
          }
        dest: /etc/xinetd.d/mysqld
        owner: root
        group: root
        mode: '0644'
      when: inventory_hostname == "zone1"

    - name: Enable xinetd
      systemd:
        name: xinetd
        state: restarted
        enabled: true
      when: inventory_hostname == "zone1"
